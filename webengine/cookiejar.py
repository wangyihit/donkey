#!/usr/bin/env python
# encoding=utf-8
import json
import logging

import tldextract
from PySide6.QtCore import QByteArray, QDateTime

from PySide6.QtNetwork import QNetworkCookie, QNetworkCookieJar
from PySide6.QtWebEngineCore import QWebEngineProfile, QWebEngineCookieStore
from PySide6.QtNetwork import QNetworkCookie
'''
cookie file format

# Netscape HTTP Cookie File
# http://curl.haxx.se/rfc/cookie_spec.html
# This file was generated by libcurl! Edit at your own risk.
 
www.example.com        FALSE        /        FALSE        1338534278        cookiename        value
The first few lines are comments and can therefore be ignored. The cookie data consists of the following items (in the order they appear in the file.

domain - The domain that created and that can read the variable.
flag - A TRUE/FALSE value indicating if all machines within a given domain can access the variable. This value is set automatically by the browser, depending on the value you set for domain.
path - The path within the domain that the variable is valid for.
secure - A TRUE/FALSE value indicating if a secure connection with the domain is needed to access the variable.
expiration - The UNIX time that the variable will expire on.
name - The name of the variable.
value - The value of the variable.


'''





class CookieJar(QNetworkCookieJar):

    def __init__(self, cookie_store: QWebEngineCookieStore):
        super(CookieJar, self).__init__()

        # self._cookie_store = self._webengine_profile.cookieStore()
        self._cookie_store = cookie_store
        # self.connect(self._cookie_store, QWebEngineCookieStore.cookieAdded, self._handle_add_cookie)
        # self._cookie_store.cookieAdded.connect(self._handle_add_cookie)

    def handle_add_cookie(self, cookie: QNetworkCookie):
        self.insertCookie(cookie)
        # logging.info("insert cookie: %s" % cookie)


    @staticmethod
    def _cookie2string(cookie: QNetworkCookie)->str:
        data = "%s %s %s %s %s %s %s" % (
            cookie.domain(),
            True,
            cookie.path(),
            cookie.isSecure(),
            cookie.expirationDate().toSecsSinceEpoch(),
            cookie.name().toStdString(),
            cookie.value().toStdString()
        )
        return data

    def curl_cookies_by_domain(self, domain:str):
        cookies = self.allCookies()
        # domain flag path secure expiration name value
        cookie_data = []
        for cookie in cookies:
            cookie_domain = cookie.domain()
            if cookie_domain != domain:
                continue
            data = self._cookie2string(cookie)
            cookie_data.append(data)
        return "\n".join(cookie_data)

    def curl_cookies_by_url(self, url):
        extracted_url = tldextract.extract(url)
        return self.curl_cookies_by_domain(extracted_url.domain)


    def to_curl_cookies(self):
        cookies = self.allCookies()
        # domain flag path secure expiration name value
        cookie_data = []
        for cookie in cookies:
            data = self._cookie2string(cookie)
            cookie_data.append(data)
        return "\n".join(cookie_data)

    def network_cookies(self, domain:str=None)->list[QNetworkCookie]:
        cookies = self.allCookies()
        if domain is None:
            return cookies
        cookie_data = []
        for cookie in cookies:
            if cookie.domain() == domain:
                cookie_data.append(cookie)
        return cookie_data


    def to_qt_cookies(self):
        cookies = self.allCookies()
        data = []
        for cookie in cookies:
            line = cookie.toRawForm()
            data.append(line.toStdString())
        return json.dumps(data, indent=4)

    def load_qt_cookie(self, cookie_data:str):
        cookies = json.loads(cookie_data)
        cookie_list = []
        for cookie in cookies:
            if cookie == "":
                continue
            b = QByteArray()
            network_cookies = QNetworkCookie.parseCookies(b.append(cookie.encode("utf-8")))
            cookie_list += network_cookies
        for cookie in cookie_list:
            self._cookie_store.setCookie(cookie)
        return

    def get_network_cookies(self, host_name:str=None)->list[QNetworkCookie]:
        cookies = self.network_cookies(host_name)
        return cookies

    def add_cookie(self, name:str, value:str, path="/", domain=None, secure=False, http_only=False, maxage=None):
        network_cookie = QNetworkCookie(name=name.encode(), value=value.encode())
        network_cookie.setDomain(domain)
        network_cookie.setSecure(secure)
        network_cookie.setHttpOnly(http_only)
        network_cookie.setPath(path)
        one_year = QDateTime.currentDateTime().addDays(36500)
        network_cookie.setExpirationDate(one_year)
        # self._cookie_store.setCookie(network_cookie)
        self.insertCookie(network_cookie)

    def add_network_cookie(self, network_cookie:QNetworkCookie):
        self.insertCookie(network_cookie)

    def set_cookies(self, cookies):
        self.load_qt_cookie(cookies)

    def load_cookies(self, cookies):
        self.load_qt_cookie(cookies)
